import Head from "next/head";
import React, { useEffect, useState } from "react";
import axios from "axios";
import PullToRefresh from "../components/PullToRefresh";
import Character from "../components/Character";
import styles from "../styles/Home.module.css";
import Button from "@mui/material/Button";
import Image from "next/image";
import Snackbar from "@mui/material/Snackbar";
import IconButton from "@mui/material/IconButton";
import CloseIcon from "@mui/icons-material/Close";
import { useSelector, useDispatch } from "react-redux";

import {
  getCharacters,
  getNextPageCharacters,
  resetCharacters,
  clearCharacter,
} from "../store/actions";

export default function Home() {
  const [open, setOpen] = useState(false);
  const characterResults = useSelector((state) => state.data);
  const dispatch = useDispatch();

  const handleClick = () => {
    dispatch(resetCharacters());
  };

  const handleClose = () => {
    setOpen(false);
  };

  const handleRefresh = () => {
    dispatch(resetCharacters());
    dispatch(getCharacters(axios));
  };

  const action = (
    <React.Fragment>
      <IconButton
        size="small"
        aria-label="close"
        color="inherit"
        onClick={handleClose}
      >
        <CloseIcon fontSize="small" />
      </IconButton>
    </React.Fragment>
  );

  const characters = characterResults.characters ?? [];
  const errorMessage = characterResults.message ?? undefined;

  useEffect(() => {
    const handleScroll = (event) => {
      if (
        window.innerHeight + window.pageYOffset >=
        document.body.offsetHeight
      ) {
        if (!characterResults.loadingNextPage) {
          dispatch(getNextPageCharacters(axios));
        }
      }
    };

    window.addEventListener("scroll", handleScroll);

    return () => {
      window.removeEventListener("scroll", handleScroll);
    };
  }, [characterResults.loadingNextPage]);

  useEffect(() => {
    dispatch(clearCharacter());
    if (errorMessage) {
      setOpen(true);
    }
  }, [errorMessage]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Obe fitness takehome</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Snackbar
        anchorOrigin={{ vertical: "top", horizontal: "center" }}
        open={open}
        autoHideDuration={6000}
        onClose={handleClose}
        message={errorMessage}
        action={action}
      />
      <main className={styles.main}>
        <Button onClick={handleClick} variant="contained">
          Reset
        </Button>
        <div id="test" className={styles.resultsContainer}>
          <PullToRefresh
            onRefresh={handleRefresh}
            loading={characterResults.loading}
          >
            {characters.map((character, index) => {
              const isLastCellAndLoading =
                characters.length - 1 === index &&
                characterResults.loadingNextPage;
              return isLastCellAndLoading ? (
                <Image
                  className={styles.loader}
                  priority
                  src="/images/spinner.gif"
                  height={50}
                  width={50}
                  alt="loading spinner"
                  key={index}
                />
              ) : (
                <Character
                  key={index}
                  data={character}
                  id={character.id}
                ></Character>
              );
            })}
          </PullToRefresh>
        </div>
      </main>
    </div>
  );
}
